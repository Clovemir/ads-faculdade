Explicação do código:
HTML com Vue.js integrado:

A estrutura HTML é a mesma fornecida anteriormente, exceto que agora há uma integração com Vue.js.
O cronômetro é exibido dentro de {{ formattedTime }}, que é uma computed property do Vue.js.
Essa propriedade reage às mudanças no estado (segundos, minutos e horas).


Os botões Iniciar, Parar e Zerar têm eventos de clique que chamam os métodos 
Vue @click="startTimer", @click="stopTimer", e @click="resetTimer".


Script Vue.js:
data: Armazena os dados reativos, como o tempo (seconds, minutes, hours),
 um identificador para o setInterval (interval) e o estado do cronômetro (isRunning).

computed: A propriedade formattedTime calcula o tempo atual formatado como hh:mm:ss. 
Isso é útil para manter o código organizado e permitir que a exibição do tempo reaja automaticamente às mudanças.

methods: Define as funções que controlam o comportamento do cronômetro.

startTimer: Inicia o cronômetro apenas se ele já não estiver rodando, 
usando setInterval para incrementar o tempo a cada segundo. Ele define isRunning 
como true para controlar o estado.

stopTimer: Para o cronômetro limpando o setInterval e define isRunning como false.
resetTimer: Para o cronômetro e reseta os valores de tempo para zero.
incrementTime: É chamado a cada segundo quando o cronômetro está rodando,
 incrementando os segundos e ajustando minutos e horas conforme necessário.

Como funciona:
O Vue.js reatividade atualiza automaticamente a exibição ({{ formattedTime }}) 
sempre que o estado do cronômetro (segundos, minutos ou horas) muda.

As funcionalidades de "Iniciar", "Parar" e "Zerar" são controladas pelos métodos, 
e o botão de "Parar" é desativado quando o cronômetro não está rodando (:disabled="!isRunning"), 
enquanto o de "Iniciar" é desativado quando o cronômetro já está rodando (:disabled="isRunning").